<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[拆掉思维里的墙——原来我还可以这样活（二）]]></title>
      <url>/2017/08/22/%E6%8B%86%E6%8E%89%E6%80%9D%E7%BB%B4%E9%87%8C%E7%9A%84%E5%A2%99%E2%80%94%E2%80%94%E5%8E%9F%E6%9D%A5%E6%88%91%E8%BF%98%E5%8F%AF%E4%BB%A5%E8%BF%99%E6%A0%B7%E6%B4%BB%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h3><p><strong>拆掉思维里的墙——原来我还可以这样活</strong></p>
<p>作者：古典</p>
<p>选题策划：北京磨铁图书有限公司</p>
<p>出版社：中国书店出版社</p>
<p>出版时间：2010.9</p>
<p>ISBN：978-7-8066-3886-6</p>
<h3 id="今日导言"><a href="#今日导言" class="headerlink" title="今日导言"></a>今日导言</h3><p>今天让我们来看看心智模式这个东西，如果说每个人的大脑是硬件的话，那么心智模式就是每个人的软件。</p>
<p>硬件上，99%的人群里都不会有太大的差距，之所以人和人之间的思维和行为会有天差地别，主要来源于软件上的差别。</p>
<p>每天、每小时、每分钟、每秒钟，我们都在不停地写程序，写什么呢？创造新的心智模式，修正旧的心智模式。优秀的人代码总是写得又干净又好，于是，他们有更好的思维模式，遇到事情有更为正面的反应和直指核心的能力。</p>
<h3 id="自证预言"><a href="#自证预言" class="headerlink" title="自证预言"></a>自证预言</h3><p>心智模式，也就是思考问题的方式，决定了每个人的命运。</p>
<p>我想你一定听过自证预言，有点类似吸引力法则，还有人据此发展出一套套玄之又玄的能量波之类的理论。其实没那么玄乎，简而言之，当你坚定不移地认为自己是怎么样的，那么你的所有心智和行为模式就都会在不经意间朝那个方向偏离，直到你真正成为了那样的人。</p>
<p>之前就有一个很出名的实验，将一个班级里的学生分为成功者和失败者。成功者意味着天赋好，成功的概率较大；失败者意味着天赋差，成功的概率较小。过了几个学期，老师们发现，成功者果然成绩越来越好，失败者果然成绩越来越差，什么原因呢？</p>
<p>原来成功者自信心都很强，他们处处以成功者的标准来要求自己，老师们特别偏爱，就容易多传授些知识，因此成绩就越来越好，而失败者觉得自己再努力也是失败，就很容易自暴自弃，对自己的退步也不甚关心，老师们觉得他们糟糕透了，渐渐地教得也不太认真，因此他们成绩就越来越差。</p>
<p>了解了这种心智模式后，我们需要时时警惕，避免掉入心智陷阱。但同时，我们也可以正向利用它来达成目标。</p>
<h3 id="自动加工（1）"><a href="#自动加工（1）" class="headerlink" title="自动加工（1）"></a>自动加工（1）</h3><p>不知道你有没有这样的体验，就是你的大脑常常不听你的话，它更喜欢受雇于你的固定思维，而非你的自主心智？</p>
<p>比如说，当你看到有媒体报道为富不仁，欺压底层人民的时候，你会不会根本不了解事情的真相就直接在网上一顿喷？而这仅仅是由于曾经或是现在你也是底层人民的一员，又或者你曾经被富人欺压过，伤害过自尊，所以你感同身受了，于是就搬出了自己的固定思维——富人都该死。这是你潜意识里的固定思维。</p>
<p>但当事情反过来，底层人民嚣张地打了富人，作为底层人民的你也许你会更加谨慎地对待报道，你会去反向思考——或许另有隐情呢？</p>
<p>这就是你的大脑加工材料的方式，它常常根据你的潜意识意愿，非客观地替你做出判断，有时候甚至替你做出某些具体的决定。</p>
<p>每个人眼中的世界都是不同的，正如现在看到这行字的时候，每个人的感悟也是不同的，都是在被自己的框架加工着的。因此，这就是为什么很多人说“懂了这么多道理，还是过不好这一生”，因为很多人拿自己的框架一加工，往往就把那些道理给变味了，引不起行动是很正常的。</p>
<p>然而这样的状况却是我们应该竭力避免的，无论在任何情况下，我们都该夺回大脑的控制权。</p>
<h3 id="自动加工（2）"><a href="#自动加工（2）" class="headerlink" title="自动加工（2）"></a>自动加工（2）</h3><p>思维定式极易让我们陷入心智困局。有人说，那我抛弃现有思维定式不就可以了？我用一张白纸的心态去面对未来的外在刺激以及内在反馈。</p>
<p>可能没这么简单，因为思维定式是在不断同现实的接触中逐渐形成的，这就意味着哪怕你抛弃了之前的所有，但你若是不非常注意的话，很容易就会生成新的。</p>
<p>作者举了一个有钱人的例子，为什么明明很有钱了还是不快乐？因为有钱跟幸福快乐的关系并非总是正比的。在有钱人还比较穷的时候，每挣到多一点的钱，幸福指数就会飙升，因为极大地丰富了物质生活，于是，他的脑子里就植入了有钱就能幸福的心智模式。</p>
<p>但当他已经很有钱了，钱的继续增多，对幸福的边际提升已经很小甚至为负了的时候，他还是固守以前的心智模式，于是继续拼命挣钱甚至过度挤压了跟家人的相处时间，所以金钱越多，幸福感就越下降了。</p>
<p>这就是一个从实践中生成心智模式，但当环境变化以后，又没有将心智模式进行及时调整的典型例子，养成这种习惯的人就会任凭自己被大脑的现有框架所控制。所以我们要根据环境的变化随时升级自己的心智模式，就跟软件升级是一样的。</p>
<h3 id="正确努力"><a href="#正确努力" class="headerlink" title="正确努力"></a>正确努力</h3><p>“一分耕耘一分收获”这样的句子听起来十分正确，但却并不总是适用的，还得看你怎样耕耘，想收获的是什么。</p>
<p>有时候我们容易自我感动，觉得我既然耕耘了，那就该有我想要的收获，这是十分粗暴和幼稚的想法。因为首先，你耕耘的力度和你想要的结果之间，是不是可以对等？这只是来自你自个儿的判断；其次，你耕耘的方向是不是真的可以导向那个你期待的结果？这也只是你的自以为。</p>
<p>努力还得使用正确的心智模式来评估，有效的努力就是行使正确的心智模式的结果，无效的努力则恰恰相反。努力的效果是不以你自认为付出多少为转移的。比如很多人起早贪黑干活，最后却挣不到多少钱，他们喜欢抱怨。但你要问他们为什么不去选择另一份更高效的工作呢？他们会说自己没技能，没技能为什么不去学呢？他们嫌麻烦，怕学不会。所以他们还是每天起早贪黑，每天告诉自己付出很多，依然抱怨社会不公。</p>
<p>这完全是心智模式的问题。</p>
<h3 id="超越心智"><a href="#超越心智" class="headerlink" title="超越心智"></a>超越心智</h3><p>我们的心智模式形成于自己在过去对客观信息的摄入和加工，起初的摄入过程通常没有多大的差别，但加工过程就大相径庭。</p>
<p>而加工过程的不同，又导致我们形成了不同的加工模式，从而渐渐连摄入的方式都渐渐有了差距。</p>
<p>比如拥有不同加工习惯的厨师，他们在见到同一种食材时，脑子里迸发出的灵感就是迥然不同，从而使得看待食材的方式也有了不同。</p>
<p>所以要超越心智首先要懂得心智的运行模式，其次要能够看到更好的模式，通过两相对比，找出哪怕是微小的差异，方能在不断反省中建立起更为快速有效的反馈机制，这就是进步的过程，也就是作者说的，从不知不觉，到后知后觉，再到当知当觉，最后到先知先觉，这就是心智模式升级的路径。</p>
]]></content>
      
        <categories>
            
            <category> 读书 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 另一类 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式——职责链模式]]></title>
      <url>/2017/08/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="案例背景"><a href="#案例背景" class="headerlink" title="案例背景"></a>案例背景</h3><p>大四还有课，而且学校抓的比较严，所以对于那些想翘课的人来说这个是最好不过的理由了—去参加校招了。所以咱学校规定所以去参加校招的必须要请假，且必须要有相关人员的签字，三天一下，辅导员签字、三到七天系主任签字，一个星期以上院长签字，更多？校长(不知道能不能找到校长呢？反正我是没见校长几面)，出了这样的政策确实上课情况好多了！对于这中将请求一级一级地往上传递直到处理请求为止的设计模式就是职责链模式。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1firldxzzdwj30tq0aawex.jpg" alt=""></p>
<p>上图将学生、辅导员、系主任、院长、校长组成了一个简单的链。<strong>在这个链上，学生是申请者，其余的都是请求处理者。职责链可以将请求的处理者组织成一条链，并且将请求沿着链传递，如果某个请求处理者能够处理请求则处理，否则将该请求交由上级处理。</strong></p>
<p>职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以<strong>职责链将请求的发送者和请求的处理者解耦了，这就是职责链的设计动机。</strong><br><a id="more"></a></p>
<h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p><strong>避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止，这就是职责链模式。</strong></p>
<p>在职责链模式中最关键的一点就是客户提交请求后，请求沿着链往下传递直到有一个处理者处理它，在这里客户无需关心它的请求是哪个处理者来处理，反正总有一个处理者会处理它的请求。</p>
<p>在这里客户端和处理者都没有对方明确的信息，同时处理者也不知道职责链中的结构。所以职责链可以简化对象的相互连接，他们只需要保存一个指向其后续者的引用，而不需要保存所有候选者的引用。</p>
<p>在职责链模式中我们可以随时随地的增加或者更改一个处理者，甚至可以更改处理者的顺序，增加了系统的灵活性。处理灵活性是增加了，但是有时候可能会导致一个请求无论如何也得不到处理，它会被放置在链末端，这个既是职责链的优点也是缺点。</p>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p>下图是职责链模式的UML结构图：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1firlj9n2tyj30vy0jm408.jpg" alt=""></p>
<p>从上面可以看出职责链包含三个角色：</p>
<ul>
<li>Handler: 抽象处理者。定义了一个处理请求的方法。所有的处理者都必须实现该抽象类。 </li>
<li>ConcreteHandler: 具体处理者。处理它所负责的请求，同时也可以访问它的后继者。如果它能够处理该请求则处理，否则将请求传递到它的后继者。 </li>
<li>Client: 客户类。</li>
</ul>
<p>下面是最典型的具体处理者类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(String request)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(请求request满足条件)</div><div class="line">        &#123;</div><div class="line">            ......  <span class="comment">//处理请求；</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">this</span>.successor.handleRequest(request); <span class="comment">//转发请求</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="模式的实现"><a href="#模式的实现" class="headerlink" title="模式的实现"></a>模式的实现</h3><p>我们将使用开头那个请假的实例。请假：3天以下辅导员签字、3到5天系主任签字、6到10天院长签字、11-15天校长签字、15天以上不允签字。</p>
<p><strong>首先是请假条：LeaveNode.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaveNode</span> </span>&#123;</div><div class="line">    <span class="comment">/** 请假天数 **/</span></div><div class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> number;</div><div class="line">    </div><div class="line">    <span class="comment">/** 请假人 **/</span></div><div class="line">    <span class="keyword">private</span> String person;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LeaveNode</span><span class="params">(String person,<span class="keyword">int</span> number)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.person = person;</div><div class="line">        <span class="keyword">this</span>.number = number;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> number;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.number = number;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPerson</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> person;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(String person)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.person = person;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>抽象处理者：Leader.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</div><div class="line">    <span class="comment">/** 姓名 **/</span></div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">    </div><div class="line">    <span class="comment">/** 后继者 **/</span></div><div class="line">    <span class="keyword">protected</span> Leader successor;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leader</span><span class="params">(String name)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(Leader successor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.successor = successor;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(LeaveNode LeaveNode)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <strong>四个具体处理者</strong></p>
<p><strong>辅导员：Instructor.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Instructor</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Instructor</span><span class="params">(String name)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(LeaveNode LeaveNode)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(LeaveNode.getNumber() &lt;= <span class="number">3</span>)&#123;   <span class="comment">//小于3天辅导员审批</span></div><div class="line">            System.out.println(<span class="string">"辅导员"</span> + name + <span class="string">"审批"</span> +LeaveNode.getPerson() + <span class="string">"同学的请假条,请假天数为"</span> + LeaveNode.getNumber() + <span class="string">"天。"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;     <span class="comment">//否则传递给系主任</span></div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.successor != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">this</span>.successor.handleRequest(LeaveNode);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>系主任： DepartmentHead.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentHead</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DepartmentHead</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(LeaveNode LeaveNode)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(LeaveNode.getNumber() &lt;= <span class="number">7</span>)&#123;   <span class="comment">//小于7天系主任审批</span></div><div class="line">            System.out.println(<span class="string">"系主任"</span> + name + <span class="string">"审批"</span> +LeaveNode.getPerson() + <span class="string">"同学的请假条,请假天数为"</span> + LeaveNode.getNumber() + <span class="string">"天。"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;     <span class="comment">//否则传递给院长</span></div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.successor != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">this</span>.successor.handleRequest(LeaveNode);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>   <strong>院长：Dean.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dean</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dean</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(LeaveNode LeaveNode)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(LeaveNode.getNumber() &lt;= <span class="number">10</span>)&#123;   <span class="comment">//小于10天院长审批</span></div><div class="line">            System.out.println(<span class="string">"院长"</span> + name + <span class="string">"审批"</span> +LeaveNode.getPerson() + <span class="string">"同学的请假条,请假天数为"</span> + LeaveNode.getNumber() + <span class="string">"天。"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;     <span class="comment">//否则传递给校长</span></div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.successor != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">this</span>.successor.handleRequest(LeaveNode);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <strong>校长：President.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">President</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">President</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(LeaveNode LeaveNode)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(LeaveNode.getNumber() &lt;= <span class="number">15</span>)&#123;   <span class="comment">//小于15天校长长审批</span></div><div class="line">            System.out.println(<span class="string">"校长"</span> + name + <span class="string">"审批"</span> +LeaveNode.getPerson() + <span class="string">"同学的请假条,请假天数为"</span> + LeaveNode.getNumber() + <span class="string">"天。"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;     <span class="comment">//否则不允批准</span></div><div class="line">            System.out.println(<span class="string">"请假天天超过15天,不批准..."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>客户端：Client.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Leader instructor = <span class="keyword">new</span> Instructor(<span class="string">"陈毅"</span>);       <span class="comment">//辅导员</span></div><div class="line">        Leader departmentHead = <span class="keyword">new</span> DepartmentHead(<span class="string">"王明"</span>);    <span class="comment">//系主任</span></div><div class="line">        Leader dean = <span class="keyword">new</span> Dean(<span class="string">"张强"</span>);      <span class="comment">//院长</span></div><div class="line">        Leader president = <span class="keyword">new</span> President(<span class="string">"王晗"</span>);     <span class="comment">//校长</span></div><div class="line">        </div><div class="line">        instructor.setSuccessor(departmentHead);       <span class="comment">//辅导员的后续者是系主任</span></div><div class="line">        departmentHead.setSuccessor(dean);             <span class="comment">//系主任的后续者是院长</span></div><div class="line">        dean.setSuccessor(president);                  <span class="comment">//院长的后续者是校长</span></div><div class="line">        </div><div class="line">        <span class="comment">//请假3天的请假条</span></div><div class="line">        LeaveNode leaveNode1 = <span class="keyword">new</span> LeaveNode(<span class="string">"张三"</span>, <span class="number">3</span>);</div><div class="line">        instructor.handleRequest(leaveNode1);     </div><div class="line">        </div><div class="line">        <span class="comment">//请假9天的请假条</span></div><div class="line">        LeaveNode leaveNode2 = <span class="keyword">new</span> LeaveNode(<span class="string">"李四"</span>, <span class="number">9</span>);</div><div class="line">        instructor.handleRequest(leaveNode2);</div><div class="line">        </div><div class="line">        <span class="comment">//请假15天的请假条</span></div><div class="line">        LeaveNode leaveNode3 = <span class="keyword">new</span> LeaveNode(<span class="string">"王五"</span>, <span class="number">15</span>);</div><div class="line">        instructor.handleRequest(leaveNode3);</div><div class="line">        </div><div class="line">        <span class="comment">//请假20天的请假条</span></div><div class="line">        LeaveNode leaveNode4 = <span class="keyword">new</span> LeaveNode(<span class="string">"赵六"</span>, <span class="number">20</span>);</div><div class="line">        instructor.handleRequest(leaveNode4);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1firlt3jm0aj30xk04c0t4.jpg" alt=""></p>
<h3 id="模式的优缺点"><a href="#模式的优缺点" class="headerlink" title="模式的优缺点"></a>模式的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol>
<li>降低耦合度。它将请求的发送者和接受者解耦。</li>
<li>简化了对象。使得对象不需要知道链的结构。</li>
<li>增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。</li>
<li>增加新的请求处理类很方便。</li>
</ol>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>不能保证请求一定被接收。</li>
<li>系统性能将受到一定影响，而且在进行代码调试时不太方便；可能会造成循环调用。</li>
<li>可能不容易观察运行时的特征，有碍于除错。</li>
</ol>
<h3 id="模式适用场景"><a href="#模式适用场景" class="headerlink" title="模式适用场景"></a>模式适用场景</h3><ul>
<li>有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。</li>
<li>在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。</li>
<li>可动态指定一组对象处理请求。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>职责链模式将请求的发送者和接受者解耦了。客户端不需要知道请求处理者的明确信息，甚至不需要知道链的结构，它只需要将请求进行发送即可。</li>
<li>职责链模式能够非常方便的动态增加新职责或者删除职责。</li>
<li>客户端发送的请求可能会得不到处理。</li>
<li>处理者不需要知道链的结构，只需要明白他的后续者是谁就可以了。这样就简化了系统中的对象。</li>
</ol>
<blockquote>
<p>转载<a href="http://www.cnblogs.com/chenssy/p/3332193.html" target="_blank" rel="external">设计模式读书笔记—–职责链模式</a>，文章写的浅显易懂，直接搬过来了。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[拆掉思维里的墙——原来我还可以这样活（一）]]></title>
      <url>/2017/08/21/%E6%8B%86%E6%8E%89%E6%80%9D%E7%BB%B4%E9%87%8C%E7%9A%84%E5%A2%99%E2%80%94%E2%80%94%E5%8E%9F%E6%9D%A5%E6%88%91%E8%BF%98%E5%8F%AF%E4%BB%A5%E8%BF%99%E6%A0%B7%E6%B4%BB%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h3><p><strong>拆掉思维里的墙——原来我还可以这样活</strong></p>
<p>作者：古典</p>
<p>选题策划：北京磨铁图书有限公司</p>
<p>出版社：中国书店出版社</p>
<p>出版时间：2010.9</p>
<p>ISBN：978-7-8066-3886-6</p>
<h3 id="开篇介绍"><a href="#开篇介绍" class="headerlink" title="开篇介绍"></a>开篇介绍</h3><p>《拆掉思维里的墙》关于“那一类”的书籍，让我眼前一亮。</p>
<p>为什么说是“那一类”呢，因为现有的归类方式太匮乏，你很难将它归于纯粹的成功学、心理学、励志学等里面的任意一类，或许可以稍稍靠上一点认知学，但也不完全是，然而市面上确实有这一类书存在，虽然数量并不多，因为能写好也并不容易。</p>
<h3 id="今日导言"><a href="#今日导言" class="headerlink" title="今日导言"></a>今日导言</h3><p>安全感这种东西人人都想要，但过度追求却可能是有害的，因为过度追求安全感，必定是以放弃很多潜在的机会为代价，这个结论来自于风险和利润之间的关系。</p>
<h3 id="房子的安全感"><a href="#房子的安全感" class="headerlink" title="房子的安全感"></a>房子的安全感</h3><p>很多人对于房子有一种执念，觉得有房才有家，房子是安全感的象征，这是一种很荒谬的想法。</p>
<p>之所以荒谬，一个原因是把房子跟家绑在一起本就是非常不恰当的，因为家就是家，家是由人组成的，而房子就是房子，是由钢筋水泥组成的，把两者人为捆绑是耍流氓。</p>
<p>另一个原因是，对于年轻人来说，房子占据流动资金的金额过于巨大，这也意味着对于很多年轻人来说，一旦购房，就意味着跟很多机会说了再见。成本的概念是什么？<strong>成本就是你为了某事或某物放弃了原本可获得的最大利益。</strong></p>
<p>对于年轻人来说，买了房以后，未来的无限可能也许就要大幅缩水，这种安全感其实本质上是以放弃了未来可能会产生的更大的安全感为代价的，因此<strong>买房并不会让安全感凭空产生，它只是一个交易行为。</strong></p>
<p>同理，若是有人通过父母出钱买房也是一样，父母提供的东西越多，他们试图掌控的东西就越多，你所能够随心所欲的选择就越少，同样是减少了很多未来的可能性，其本质也是一场交易。</p>
<p>至于投机品的涨跌，这是从事后去看的，不能因为近10几年买房的人看上去资产的表面数字升值了就说买房有安全感，年轻人努力工作能跑赢房价的还是不少的，更何况房价上涨还只是个概率事件，若是不大幅上升了呢？就会被工作上的成长远远甩在后面。</p>
<h3 id="职业的安全感"><a href="#职业的安全感" class="headerlink" title="职业的安全感"></a>职业的安全感</h3><p>除了房子的安全感，很多人也在追寻职业上的绝对安全感，很可惜，我们刚刚已经说了，安全感的本质是拿未来的安全感或者其他更重要的东西交换而来，所以绝对安全感纯粹是一个子虚乌有的概念。这也意味着不管你做出任何决定，你都不可能绝对安全。</p>
<p>比如一个人在纠结，究竟是选择考研还是工作呢？如果选择考研，万一毕业以后研究生不吃香了怎么办？错过了黄金的工作机会怎么办？研究生学历没有三年工作经历有用怎么办；同样的，如果选择工作，研究生起薪是不是会更高？如果在工作上找不到突破怎么办？万一在公司里是学历越高的升迁的机会更大怎么办……</p>
<p>其实事实是，任意一个选择可能都没有他想象中这么差，我在关于“选择”的文章里写道：有些人，哪里都是阳光；有些人，哪里都是迷茫。在一些人看来，选哪个都能成功，在另一些人看来，选哪个都会后悔。</p>
<p><strong>追求绝对的安全感，往往就容易把自己困在思维之墙，做什么都做不好，甚至有人会因为左选也不对，右选也有顾虑，从而选择了什么也不改变。</strong></p>
<h3 id="爱情里的安全感"><a href="#爱情里的安全感" class="headerlink" title="爱情里的安全感"></a>爱情里的安全感</h3><p>爱情里有很多的误区，其中一个就是过度追求安全感。比如很多人会去查伴侣的电话、微信，会让对方时时报备甚至安装定位，还会像猎犬一样嗅他们身上的气味，这些都不是源于爱情。</p>
<p>有人会说，为什么不是呢？我是因为在乎他（她），怕失去他（她）才会这么做的啊，这不是爱他（她）吗？</p>
<p>这种说法极度错误，你害怕的是对方的背叛，所以才这么做，那么对方若是背叛，受伤最大的是谁呢？就是你。所以你不是因为爱他（她），恰恰是因为爱自己才这么做，而你所有的行为，只是出于恐惧。</p>
<p><strong>有那么一些人，因为恐惧，所以一切不在自己掌控范围内的，哪怕仅有一丁点的可能会伤害到自己的，都会非常害怕，迫不及待地想要更多的掌控。</strong></p>
<p>另一些人，他们觉得没有对方不能活，同时要求对方也没有自己不能活，所以他们看到对方没有自己也活得很好的时候，会莫名恼火，其实本质上不是对对方的恼火，而是对自己。为什么我不能没有你，而你却可以没有我？这是由于他们搞不清楚 “爱”究竟是什么。</p>
<p>还有一些人常常把喜欢和爱搞混，作者的定义是：<strong>喜欢针对行为，爱则是针对人本身。</strong>你可以不喜欢他（她）的行为，但不妨碍你的爱。爱，克制的对象是自己，如果你因为不喜欢他（她）的某些行为导致你不爱了，那么就表示你从一开始就没爱过，只是喜欢而已。</p>
<p>所以请记住：<strong>依赖不是爱，爱自己不是爱，喜欢也不是爱。</strong>爱情里的安全感只有你自己可以给。</p>
<h3 id="面对恐惧"><a href="#面对恐惧" class="headerlink" title="面对恐惧"></a>面对恐惧</h3><p>过度安全感会导致很多问题，比如很多事情之所以做不好，其实不是我们真的做不好，而是我们自己先给了自己一个定义，然后就陷入了自证循环。</p>
<p><strong>比如我们觉得自己做不好某事，于是就避免做某事，结果因为缺少练习，真的就做不好了。</strong>就像当众演讲，没有多少人觉得自己是做得好的，于是，练习演讲的人寥寥无几，坚持练演讲的人就更是凤毛麟角，当然最后讲得好的，也就那么几个。</p>
<p>如果你一开始就告诉自己，这些能力都可以通过后天培养达到，坚定这样的信念，也许你也能成为演讲大师，因为对于大多数事情来说，重复练习的区域和次数远远比天赋本身重要得多。因此，<strong>本质上是我们自己将自己的路给堵死了。</strong></p>
<p>关于房子、职业、爱情的错误概念，都让我们执着于追求虚妄的安全感，以致于丢掉了生命中很多其他的可能性，其实我们也许本可以更好。</p>
<p>有人说，那万一变得更差呢？这当然有可能，但上帝不是要你成功，他只是想你尝试而已。在损失可控的范围内，试着放弃一部分安全感，看看更多可能，又何尝不可呢？</p>
<p>太多的安全感有时并不是什么好事，因为这会让你退化相应的生存技能，当有一天安全感不再，你可能会面临无法独立生存的窘境。再想想，自己为什么要这么多安全感？因为恐惧。</p>
<p>有人怕蛇，有人怕鬼，有人怕狗，有人怕老鼠……但大多数人都怕黑。为什么？因为黑代表想象的空间，你总是担心那个从黑夜里走出来的东西正是你内心最怕的东西。</p>
<p>但事实上呢？有多少人无论尝试多少次，都没有遇到过那个最怕的东西从黑夜里出来？<strong>绝大部分的恐惧，是我们自己的想象给予自己的。</strong></p>
<p>恐惧是一个懦夫，当你真的面对它，并准备好接受所有最坏的结果时，你会发现，它根本不能把你怎么样。鬼屋里的工作人员不怕那些怕得不得了的人，也不怕那些根本不怕笑嘻嘻的人，最怕那些明明很怕，却用最大的勇气去面对的人，因为这些人真的会上去揍“鬼”。</p>
<h3 id="有趣与无趣"><a href="#有趣与无趣" class="headerlink" title="有趣与无趣"></a>有趣与无趣</h3><p>人生这个东西，分有趣和无趣。<strong>有趣之人，人生处处见有趣，无趣之人，人生处处是无趣。</strong></p>
<p>如何练习做一个有趣之人？有趣之人和无趣之人的区别就在于做事是否全情投入，以及对全情投入后的看法。有趣之人的心智模式通常是这样，投入后成功了，就收获了成果；投入后失败了，则收获了智慧，而不管是成功或是失败了，他们都能从过程中收获到快乐。</p>
<p>而无趣之人，他们对绝大多数的事情都提不起兴趣，但其实很可能并不是真的没有兴趣，而是怕全情投入了也干不好，他们<strong>不是不愿，而是不敢</strong>。于是，只能假装对某事漠不关心甚至抵制。</p>
<p>最典型的就是一些无趣的中老年人，他们不愿意使用智能手机与年轻人交流，甚至竭力阻止年轻人将时间花在智能手机上，这就是无趣的典型表现，他们恐惧陌生的世界，希望世界来适应自己，而不是自己主动去拥抱世界。</p>
<h3 id="选择合适的兴趣"><a href="#选择合适的兴趣" class="headerlink" title="选择合适的兴趣"></a>选择合适的兴趣</h3><p>有趣无趣重点在于“趣”，很多东西都会消退，比如激情，有些兴趣也会。所以有些人刚对某些东西有兴趣的时候，一想到它迟早会消退，就没有了开始的动力。</p>
<p>其实我们可以选择更为合适的兴趣来规避这种状况。如果你的兴趣是多少的年薪，那么当你逐渐接近的时候，其实兴趣是逐渐减少的，甚至超过了之后你会觉得当年的兴趣很廉价。</p>
<p>但如果你选择了一些无法达到但更深层次的兴趣，事情就变得不一样了，比如“追求真理”、“超越自己”、“帮助更多的人”等等，这种兴趣永远不会消退，因为你只能一直在路上。</p>
<p>比如我的其中一个兴趣是为所有人提供更好的阅读体验，这个兴趣就是永无止境的，不仅在人数上永无止境，在方式方法的创新和改进上也是永无止境。获得知识快？还可以更快；获得知识精确？还可以更精确。这样的兴趣就能当成一生的事业来做。</p>
]]></content>
      
        <categories>
            
            <category> 读书 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 另一类 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[异类——不一样的成功启示录（五）]]></title>
      <url>/2017/08/18/%E5%BC%82%E7%B1%BB%E2%80%94%E2%80%94%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E6%88%90%E5%8A%9F%E5%90%AF%E7%A4%BA%E5%BD%95%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h3><p><strong><em>异类——不一样的成功启示录</em></strong></p>
<p><strong>原名</strong>：Outliers:The Story of Success</p>
<p>  作者：【加】马尔柯姆•格拉德威尔</p>
<p>译者：苗飞</p>
<p>出版社：中信出版社</p>
<p>出版时间：2014.3</p>
<p>ISBN：978-7-5086-4394-6</p>
<h3 id="今日导读"><a href="#今日导读" class="headerlink" title="今日导读"></a>今日导读</h3><p>一周快结束了，今天对本书内提到的所有导致成功的因素做一个总结。</p>
<h3 id="异类的秘密"><a href="#异类的秘密" class="headerlink" title="异类的秘密"></a>异类的秘密</h3><p>综合上面4天的内容，如何成为人群中的“异类”，也就是我们通常所说的成功者？</p>
<p>书中讨论的所有成功者案例都遵循某种可预知的线索，这条线索不完全是智力因素，因为我们说了，当智力过了阈值以后，绝对值就几乎不再起作用了；也不完全是个人努力，因为首先你得有运气，还得知道努力这事儿有用，会自动自发地努力，那么努力才能起作用。</p>
<p>异类说到底是一群这样的人，他们有运气，比如生在好时候，有一个好家庭，恰好碰到赏识自己的贵人等；也有足够的耐心等待运气，比如在运气到来之前能默默积累；还能当运气来的时候有拼了命去把握的意识，比如有足够的勇气去跳出现有环境，给自己另一种可能，比如强大的执行力和近乎偏执的努力等。</p>
<h3 id="创造机会"><a href="#创造机会" class="headerlink" title="创造机会"></a>创造机会</h3><p>当我们解析出了很多关于“异类”的秘密时，我们就知道，很多时候我们自己也是有机会成为“异类”的，虽然我们可能并没有比尔•盖茨这样，可以碰到连锁的大运气，但我们的一生中也会遇到各种各样的小运气，能不能通过把握一个个的小运气，最后累积成大运气，这个是在我们的掌控范围之内的。</p>
<p>同时，当我们以父母的身份出现时，如何为孩子多提供一点初始运气，为孩子多累积一点初始优势，在教育中也是至关重要。</p>
<p>不过千万不要把这样的建议当成是砸钱，砸钱是最简单最不花心思的做法，孩子的成长需要方方面面的能力，而这些能力的培养就不一定只是靠钱可以解决得了的，这需要我们有更周全的规划，挖掘更多通向成功的秘密。</p>
<p>有时候，依靠人为也是能创造出本不属于自己的机会的。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>天赋和努力都很重要，但都没有重要到能决定一个人成功的地步。如何才能迈向成功？以下是我们在本书中得到的一些启示。</p>
<p>1、善于利用年龄分组策略给自己增加优势，避免进入“不公平竞争”。</p>
<p>2、就算我们因为成绩没那么突出而受到批评，告诉自己，只是还差一点运气，我们并没有那么差，不要受到不好的心理暗示影响。</p>
<p>3、学会耐心等待，在机遇出现之前有足够的积累才能在它出现之时把握住。</p>
<p>4、对自己所在的领域投入自己力所能及的时间量，如果可以，请在有效时间上超过10000个小时。</p>
<p>5、不要过分在意智商，智商可以通过其他方面弥补，且过了阈值以后基本就没啥用了。</p>
<p>6、不要扼杀创造力和想象力，一旦扼杀了以后很难通过后天学习来习得。</p>
<p>7、如果实践智力并没有那么强，努力给自己创造情境练习，这是可以通过自信和有效社交来获取的。</p>
<p>8、坚持很重要，重要到如果没有它，其他的成功因素都无效的地步。</p>
<p>9、了解自己的文化，了解他人的文化，勇于突破文化禁锢，将好的文化为己所用。</p>
<p>10、热爱困难，培养自己从解决困难中得到成就感和乐趣的习惯，光靠意志力坚持是不太靠谱的，必须是有乐趣的自愿行动，这能让我们不容易半途而废。</p>
<h3 id="恭喜"><a href="#恭喜" class="headerlink" title="恭喜"></a>恭喜</h3><p>恭喜你，今年已经看完了一本书，请自行跟去年的成绩对比一下，是不是很有成就感？</p>
<p>其实看书没有这么难，只是身处现代社会，有时候我们确实没有足够的大块时间坐下来去仔细品味书中的世界。</p>
<p>我们很容易被即时化的东西吸走注意力。很多人说，现代人越来越浮躁了，其实说得不怎么正确，因为以前也没有现在这么多能吸引注意力的东西啊，所以注意力碎片化是个非常正常也符合时代特征的现象。</p>
<p>但知识，尤其是系统知识，是每个时代的必需品，所以我们的学习管家就应运而生，让每个人都不需要因噎废食，只需改变阅读习惯即可。</p>
<p>我相信，如果你自行读完《异类》，哪怕在大部分的时候态度都很认真，边读边做笔记，在书里获得的印象也绝没有在蚂蚁私塾的多，记得没有这么牢固，因为书中有大量无用的例子和与主题无关的内容，这不仅会让我们理不清思绪，而且很容易就会因为倦怠而读不下去，从“认真读”变成“随意翻”，从而错过真正有用的部分。</p>
]]></content>
      
        <categories>
            
            <category> 读书 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 成功 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[异类——不一样的成功启示录（四）]]></title>
      <url>/2017/08/17/%E5%BC%82%E7%B1%BB%E2%80%94%E2%80%94%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E6%88%90%E5%8A%9F%E5%90%AF%E7%A4%BA%E5%BD%95%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h3><p><strong><em>异类——不一样的成功启示录</em></strong></p>
<p><strong>原名</strong>：Outliers:The Story of Success</p>
<p>  作者：【加】马尔柯姆•格拉德威尔</p>
<p>译者：苗飞</p>
<p>出版社：中信出版社</p>
<p>出版时间：2014.3</p>
<p>ISBN：978-7-5086-4394-6</p>
<h3 id="今日导读"><a href="#今日导读" class="headerlink" title="今日导读"></a>今日导读</h3><p>说完实践智力以后，很多人可能会感慨，自己也十分缺乏实践智力。</p>
<p>其实实践智力这个东西，跟你的关系没有想象中那么大，跟你的家庭倒是有扯不开的联系，为什么我们老说“原生家庭的影响”，因为一种行为习惯和思维模式一旦形成，要改过来是很不容易的。</p>
<h3 id="协同培养（1）"><a href="#协同培养（1）" class="headerlink" title="协同培养（1）"></a>协同培养（1）</h3><p><strong>逻辑能力有很大一部分是来源于基因的，我们目前的大部分智商测试测的就是这部分能力。</strong>那么实践智力是哪里来的？比如社交，这种能力并非天生，那就肯定是后天可习得的。</p>
<p>在孩子社交能力的成长上，家庭的因素至关重要。通过对富裕家庭和贫寒家庭的调查，可以发现家境对一个孩子的影响实在是太大了。过去我们经常说地主家的傻儿子，这事儿放到现代社会已经越来越变成一种穷人的意淫，因为事实就是，富裕家庭的孩子不论在自信心上，眼界上，还是与人交往的能力上，平均水平都远在贫寒家庭的孩子之上。</p>
<p>富裕家庭的父母会想方设法让孩子懂得表达自己，协助孩子完成目标，他们也确实有这样的资源和能力，因此孩子在很小的时候就懂得如何才能达成目的；贫寒家庭的孩子总是惧怕权威，不敢表达或时常词不达意，不懂察言观色，不会为自己争取正当的权益。</p>
<p>也许这样的归纳有些粗暴，但调查显示，在社会稳定期，父母有良好经济状况的这一特质，确实能让孩子变得更为优秀，不管在哪个国家都是如此。</p>
<h3 id="协同培养（2）"><a href="#协同培养（2）" class="headerlink" title="协同培养（2）"></a>协同培养（2）</h3><p>社会学家拉里奥总结了一下这两种对孩子的培养模式，他将富裕家庭的教育策略称为<strong>“协同培养”</strong>，将贫寒家庭的教育策略成为<strong>“自然成长”</strong>。</p>
<p>协同培养策略比较注重开发孩子的天赋和潜在技能，培养他们的权利意识，而自然成长策略则只把孩子的成长当成孩子自个儿的事，因为抚养孩子长大对这些父母来说仅仅是责任而已，且也已经耗费了他们不少的力气。</p>
<p>这两种模式在本质上只是两种不同的教育方式，不存在绝对上的优劣，毕竟人与人之间还有很多不同。</p>
<p>自然成长下的孩子一定就差吗？有句话叫“穷人的孩子早当家”，家境贫寒的孩子更守规矩，更沉默，他们的独立能力更强，专注自身的时间也更多，虽然这些专注产生的价值能否跟社交等能力相抵消，见仁见智。但劣势也是显而易见的，在社会的游戏规则方面，穷人家的孩子就肯定没有富人家的社交老油条孩子理解得那么通透了。</p>
<p>虽然两种模式对孩子来说各存优劣，但富裕家庭的父母显然能够帮助孩子创造出更多的机会，毕竟要完全靠自己虽然也行得通，但几率肯定是小的，所以协同培养其实也包含了资源的潜在渗透，这让富裕家庭的孩子不仅有更强的权利意识和阶级优越感，而且有机会站在更高的起点。</p>
<h3 id="文化的力量"><a href="#文化的力量" class="headerlink" title="文化的力量"></a>文化的力量</h3><p>成功的因素多种多样，除了我们这几天学的所有的因素以外，文化也是一个很重要的因素。</p>
<p>文化传承是一股很强的力量，影响的是数代乃至更多，有时候虽然社会、经济等因素都已经天翻地覆，但某种文化却根植于人们心中。比如说起世界上最会做生意的人，你可能会说是犹太人，当然你也可能会说温州人、浙江人或者是广东人。为什么，这些地方出生的人有什么特别的基因吗？那肯定没有。</p>
<p>不过他们从小耳濡目染的教育里应该就含有一些信念，一些关于是非、好坏、道不道德的判断，这些就是文化，这些文化对一个地方大部分人的价值观、人生观、世界观的塑造起着非常大的作用。</p>
<p>在我刚刚上大学的时候，我去一个城市的小商品市场里买一件小东西，我只还了个并不离谱的价，店主就转身不搭理我了，这种情况在我所在的浙江是不可想象的，后来我多试了几家，发现都差不多，这也是一种文化。</p>
<p><strong>当我们足够了解自己从小接受的文化，再多去了解别人的文化，分清楚差别，不带丝毫偏见地去判断优劣，取长补短，就能改变一些深植于原有文化中阻碍自己成功的坏习惯，在成功路上给自己加上砝码。</strong></p>
<p>比如以我大学遇到的那个状况为例，当地人深受当地文化的影响，但只要是头脑清楚的人，见识多一点的人，就能分辨出优劣，不会被自己的当地文化所裹挟。</p>
<p>文化裹挟的只是懒得思考的人，而对于许多成功者来说，他们选择的文化仅仅是他们比较以后自愿的选择，而不是因为很多人选择了，所以自己也选择。</p>
<h3 id="热爱困难"><a href="#热爱困难" class="headerlink" title="热爱困难"></a>热爱困难</h3><p>几乎所有的成功者都是热爱困难的，因为成功的路上总是困难重重，如果不够热爱解难题，遇到难题就躲，或者试了一下不行就放弃，那么解开难题后的红利也不会属于你。</p>
<p>我们可以自行反省一下自己有没有这类好习惯。想想你在上学的时候遇到一道数学难题，你会花多少时间在它上面，30秒、1分钟、5分钟……还是半个小时？</p>
<p>我想大多数人都是最多10分钟就放弃了，幸好我并不属于这个群体，如果我解不出一道数学题，我可以为此付出一个通宵，这种习惯和偏好也直接让我在之后的求知路上持续受益。不管是以作者的视角还是以我自己的经历，可以负责任地说，面对难题时表现出来的态度比解难题的能力本身还要可贵，还要重要。</p>
<p>组建工作团队也是这样，如果说成功有什么必备素质，这种乐于解难题的素质就是其中很重要的“之一”，如果你的团队成员都有着类似的素质，那么这样的一个团队哪怕是进入一个完全陌生的领域，都能百战百胜。</p>
]]></content>
      
        <categories>
            
            <category> 读书 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 成功 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[异类——不一样的成功启示录（三）]]></title>
      <url>/2017/08/16/%E5%BC%82%E7%B1%BB%E2%80%94%E2%80%94%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E6%88%90%E5%8A%9F%E5%90%AF%E7%A4%BA%E5%BD%95%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h3><p><strong><em>异类——不一样的成功启示录</em></strong></p>
<p><strong>原名</strong>：Outliers:The Story of Success</p>
<p>  作者：【加】马尔柯姆•格拉德威尔</p>
<p>译者：苗飞</p>
<p>出版社：中信出版社</p>
<p>出版时间：2014.3</p>
<p>ISBN：978-7-5086-4394-6</p>
<h3 id="今日导读"><a href="#今日导读" class="headerlink" title="今日导读"></a>今日导读</h3><p>成功者通常被人们塑造成聪明的形象，如果谁要说哪个成功者不聪明，人们往往有个反弹式的思想：<strong>如果他不聪明，怎么会成功呢？</strong></p>
<p>因此，很多人心里都有“智商崇拜”，但事实上，智商，尤其是智力测试里的智商分数，是不是对成功有着这么大的影响呢？</p>
<h3 id="智商门槛"><a href="#智商门槛" class="headerlink" title="智商门槛"></a>智商门槛</h3><p>一直以来，人们对高智商总是有着很大的敬畏，觉得他们终将获得成功，或者说，那些获得成功的人里只要有高智商这样的特质，我们就会倾向于认为他们的天赋是导致成功最主要的因素。</p>
<p>这样的看法又对又不对。</p>
<p>对的是一个人的IQ得分越高，确实平均受教育程度越高，工资收入也越高，寿命更长，不过这种关联只在一定的阈值范围内是有效的，一旦智商超过了某个阈值，比如120，更高的智商就不能同比转化为更多的现实优势。</p>
<p>从我个人的经历来看，我同时是两个高智商组织“胜寒”和“门萨”的会员，在里面我结识到的会员没有一个在IQ测试中低于130的（130是入门门槛），但这群在IQ测试中表现非凡的人，却并没有在现实中有非常异于常人的表现，比如诞生出更大比例的企业家、科学家，或者很多其他领域的领袖等。</p>
<p><strong>一个智商200的人，并不意味着比智商150的人聪明三分之一，所有人类的尖端研究，这两个人都是足以胜任的。</strong>的确，如果要得诺贝尔奖，你需要一定的智商打底，弱智应该是没有办法得诺贝尔奖的，但到了一定的门槛就足够用了，再往上就不会同比增加你的成功概率，相反，这时候其他因素的影响就会变得更大。</p>
<p>若是你将信将疑，其实可以自己细心找找，生活中到处都是这样的例子。比如我们去评判一个人，以男性为例，长相帅气总是会受到优待，但过了70分或者80分就足矣，再往上提升，这个提升的值就不如拥有才华等其他特质更吸引人了；或者身高，150和180厘米当然有很大差别，但只要过了一个阈值，比如170厘米，那么人们会对他的其他特质更为关注，比如长相是否帅气、是否多金、是否有幽默感等。</p>
<h3 id="创造和想象"><a href="#创造和想象" class="headerlink" title="创造和想象"></a>创造和想象</h3><p>一般的智商测试题目都是要求被测人员按题目要求的逻辑找出唯一的答案，这属于收敛型测试，而发散型测试是要求充分运用想象力和创造力，答案也并不唯一。发散型测试和收敛型测试一样具有挑战性，也同样重要。</p>
<p>给几个简单的词汇，比如小河、天空、超人、桌子，烟囱，你能想象出多么精彩的故事？</p>
<p>同样是在智商测试中得到高分的，有些人想来想去都不外乎是一幅田园画卷或者是拯救世界的画面，另一些人却能编出几个甚至十几个曲折离奇的故事，那么谁更有希望拿诺贝尔奖呢？</p>
<p>不是谁的智商得分更高，谁就能同等程度地拥有其他能力，至少创造力和想象力就不是单纯在我们通常认为的智商层面可以解决的。</p>
<h3 id="纯智商的败局"><a href="#纯智商的败局" class="headerlink" title="纯智商的败局"></a>纯智商的败局</h3><p>心理学家特曼曾经做了一系列的研究，跟踪了大量智商高达140以上的少年的成长过程。他本以为那些人中很多都是被低估的天才，只要给予他们机会，一定能在很多领域有所成就，于是，他不遗余力地替他们写推荐信，为他们提供各种便利。</p>
<p>不过研究结果却是与他的预想大相径庭的，这些天才少年大都做着十分普通的工作，里面少有全国知名的人物，薪水也并不比普通人高。讽刺的是，当年有两个没能成为特曼的研究对象的，倒是得了诺贝尔奖，没有入选的理由恰恰是智商不够高。</p>
<p>所以这也正好印证了“智商门槛”，<strong>当一个人的智商达到了一定门槛，那么智商的绝对值将不再起太大的作用；同样的，一个人的智商只要不到达“低”的门槛，他也能通过其他方面的优势去补足和高智商们的智力差距。</strong></p>
<h3 id="实践智力（1）"><a href="#实践智力（1）" class="headerlink" title="实践智力（1）"></a>实践智力（1）</h3><p>在智商测试中获得高分这回事有时候只能自嗨，瞧，我能单独做出那些难题。但很多时候，<strong>我们需要让别人知道我们在某方面能干成事儿，这才是重要的事，因为人最终只能靠合作才能发挥能力。</strong></p>
<p>许多高智商的人看上去比较孤傲，是世界不理解我，而非我不融入这个世界，说孤傲是好听了，说难听点，这是缺乏实践智力的表现。</p>
<p>试想一下，如果你的智商真的足够高，当你有一个超级好想法的时候，你是否有能力说服你的老板采纳？还是说没等你说完，就被老板直接否决？这可不是智商测试表上的数据能体现的内容，<strong>这是一种评估当前形势并总能获得自己想要的结果的能力。</strong></p>
<p>很明显，智商完全相同的两个人，若是实践智力分别在高低的两极，那么成功的概率就会有天壤之别。</p>
<h3 id="实践智力（2）"><a href="#实践智力（2）" class="headerlink" title="实践智力（2）"></a>实践智力（2）</h3><p>格拉德威尔在书中举了两个智力超群的天才的例子，两个人在智商测试中的表现都非常高，都是从小就具有非凡天赋的人。一个最终碌碌无为，而另一个成为了著名的物理学家，并成为了人类第一颗原子弹项目“曼哈顿计划”的带头人。</p>
<p>这两人在智力上，几乎不存在任何差距，但他们的实践智力却相距甚远。一个能在缓刑和接受心理治疗期间让“曼哈顿计划”的负责人甘愿冒上巨大的风险相信他，另一个却连申请将课从上午调到下午都做不到（这样的事学校里司空见惯，别人都可以做到），在遭到拒绝后竟然选择不再上学。</p>
<p>这种实践智力在智商测试中并不体现，但它却是至关重要的。还记得比尔•盖茨吗？为ISI工作的学生很多，比他优秀的也不少，鬼知道比尔•盖茨是用了什么方法说服彭布鲁克选中的他，这就是实践智力的魅力所在。</p>
]]></content>
      
        <categories>
            
            <category> 读书 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 成功 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[异类——不一样的成功启示录（二）]]></title>
      <url>/2017/08/15/%E5%BC%82%E7%B1%BB%E2%80%94%E2%80%94%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E6%88%90%E5%8A%9F%E5%90%AF%E7%A4%BA%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h3><p><strong><em>异类——不一样的成功启示录</em></strong></p>
<p><strong>原名</strong>：Outliers:The Story of Success</p>
<p>  作者：【加】马尔柯姆•格拉德威尔</p>
<p>译者：苗飞</p>
<p>出版社：中信出版社</p>
<p>出版时间：2014.3</p>
<p>ISBN：978-7-5086-4394-6</p>
<h3 id="今日导读"><a href="#今日导读" class="headerlink" title="今日导读"></a>今日导读</h3><p>前面我们谈到分组制度会对人的成长及发展产生影响。有人不禁会问，是否在分组中有年龄优势就离成功更近了呢？那也没这么简单，人的一生在成长与发展中会受到各种不可预估的因素的影响，分组制度只是阐述了其中一个影响因素，但显然如果全部是由年龄决定，那么就不会有3月份以后出生的孩子了。</p>
<p>接下去我们会接触到更多影响成功的因素，究竟那些“异类”是如何成为“异类”的，让我们像手术室的医生一样，一点点去解剖。</p>
<h3 id="10000小时法则"><a href="#10000小时法则" class="headerlink" title="10000小时法则"></a>10000小时法则</h3><p>这世上究竟有没有天赋这回事？</p>
<p>肯定是有的，这很显而易见，你可以试着用同样的教学方法去教两个刚学会语言的婴儿，相信他们的接受能力也会有很大差别，更不用说每个人在不同的方向上都有着不同的天赋，比如一般人从小练跨栏，应该也是成不了刘翔的，从小练钢琴，也成不了郎朗。</p>
<p>不过随着研究者跟踪的深入，发现<strong>除了极少数的天才以外，对于绝大多数人来说，天赋上的差距在后天成就上占的比重实在是太小了。</strong></p>
<p>柏林音乐学院有一项研究，那些有望成为大师的优秀小提琴手在20岁的时候投入练琴的时间都超过了10000小时，而那些只能成为钢琴教师的学生在20岁的时候投入到练琴上的时间一共也就4000至8000小时，程度再差一点的学生就只投入了2000小时左右。</p>
<p>再看看下面的例子，比尔•盖茨进校5年间疯狂利用除睡觉外的全部时间学习电脑编程，他的练习时间超过了10000个小时；比尔•乔伊从1971年接触电脑至1975年每天学习编程近10个小时，他的练习时间超过了10000个小时。</p>
<p>莫扎特是公认的音乐天才，从6岁开始作曲，经历20多年的作曲生涯才功成名就，也超过了10000小时；包括昨天所说的加拿大冰球队的队员们，他们由于先发优势被选入全明星队后得到了足够多的强化训练机会，从少年成长为青年的十年间，比赛和练习的时间也超过了10000个小时，而那些没有被选入的队员则没什么机会达到10000个小时的训练量。</p>
<p>虽然10000个小时只是一个概数，但这也说明了<strong>通向成功没有捷径，哪怕你是不世出的天才，想要在自己所在的领域获得成功，也唯有比别人更加刻苦地练习。</strong></p>
<h3 id="初始运气"><a href="#初始运气" class="headerlink" title="初始运气"></a>初始运气</h3><p>比尔•盖茨的成功在人们的眼里似乎就是这样一个版本，一个天才偶然间遇到了计算机编程，然后毅然辍学，跟朋友开了一家叫微软的公司，然后抓住了计算机革命的浪潮，迅速成为了成功者。</p>
<p>我知道有辍学的孩子现在跟父母提起辍学的其中一个理由还是：比尔•盖茨也辍学了，既然他能成功，那么为什么我不能？</p>
<p>很明显，不管这个大众认知中的故事是不是真实的全部，辍学肯定并不是比尔•盖茨故事里的关键字。据我所知，比尔•盖茨家境极其优越，且在辍学前已经赚了一大笔钱，那些盲目模仿的小朋友们呢？</p>
<p>比尔•盖茨的成功，首先来自他的家庭带给他的初始运气。很多读者可能看过我在公号里写的关于勤奋的文章，一个人如果没有初始运气，别说成功，连入局都不可能，而比尔盖茨的初始运气显然不仅仅是入局而已，而是站在一个普通人够也够不到的起点。</p>
<p>正如上面所说，他的家境十分优越，上的是极其昂贵的私立中学，而该中学有一个计算机俱乐部，这在公立学校中是不可想象的，当时连大学里都少有，所以比尔•盖茨能比绝大部分同龄人都更早地接触到计算机编程。</p>
<p>这是一个很重要的先决条件，那些同龄人里有很大一部分很可能并非在计算机上面的天赋不如他，只是他们没有得到这样的初始运气。</p>
<h3 id="运气的连锁积累"><a href="#运气的连锁积累" class="headerlink" title="运气的连锁积累"></a>运气的连锁积累</h3><p>纵观比尔•盖茨的经历，他是在不到20岁的时候就被一系列的运气砸中了。</p>
<p>进入昂贵的私立中学，1968年全世界几乎只有这一所高中拥有分时系统的计算机终端；同学家长的公司正好需要请人去测试代码；华盛顿大学的计算机每天凌晨无人使用，而盖茨的家正好在步行范围内；ISI公司恰好想雇佣免费劳动力；为ISI公司工作的学生很多，优秀的也不少，但彭布鲁克在需要帮助时刚好点到了比尔•盖茨，让他得到了难得的被指导机会（比尔•盖茨当时在各方面都不是最优秀的）等等。</p>
<p>也许很多人会说，这期间若是没有他自己的努力，所谓的运气就算到了也是把握不住的。但懂得把握机会的人何止千万？连比尔盖茨自己都说，能拥有这种连锁运气的，全世界不会超过50个。不管其余49个是不是把握住了机会，这显然比跟60亿人竞争好太多了。</p>
<p>如果你也能在20岁之前就获得遥遥领先同龄人的机会，就算成不了比尔•盖茨，至少也不会太差。</p>
<h3 id="时势造英雄（1）"><a href="#时势造英雄（1）" class="headerlink" title="时势造英雄（1）"></a>时势造英雄（1）</h3><p>1975年1月被认为是个人计算机时代的起点，我们知道，任何一种新事物的诞生，都是越早接触的那批人有可能享受到最大的红利。</p>
<p>看看目前享受到最多计算机和互联网红利的那批人当时在干什么。</p>
<p>史蒂芬•乔布斯：    1955年2月24日；</p>
<p>比尔•盖茨：        1955年10月28日；</p>
<p>保罗•艾伦：        1953年1月21日；</p>
<p>史蒂夫•鲍尔默：     1956年3月24日；</p>
<p>埃里克•施密特：     1955年4月27日；</p>
<p>比尔•乔伊：        1954年11月8日；</p>
<p>斯科特•麦克尼利：  1954年11月13日；</p>
<p>维诺德•科斯拉：    1955年1月28日；</p>
<p>安迪•贝托尔斯海姆：1955年9月30日；</p>
<p>你很容易就会发现，上面这些在计算机和互联网产业中影响整个世界的人，他们的出生年份都如此接近，这真的只是巧合吗？</p>
<p>世界上第一台个人电脑面世的时候，上面这些人恰好都是19-22岁。这个年龄段的人大胆无畏，冲劲十足，也没有什么家庭的负担和生活的压力，正是学习的黄金年龄，稍稍学习几年之后，就是在新领域大展拳脚的年纪了。</p>
<h3 id="时势造英雄（2）"><a href="#时势造英雄（2）" class="headerlink" title="时势造英雄（2）"></a>时势造英雄（2）</h3><p>这事儿挺有意思的，凑巧的是，当我环顾了一圈周围的朋友之后，发现从小有成就到有大成就的，无一例外在创业和学习需要投入最大精力下去的时间段，都是保持着单身、两地分离，或是离异状态的。</p>
<p>这并不是给婚姻生活泼冷水，也不能以偏概全地说婚后就没法获得大的成功了，而是我相信<strong>不管是年龄上还是状态上，能够持续在学习和创业上最大限度保证比别人多的投入时间是很重要的，这绝不是单纯的巧合这么简单。</strong></p>
<p>以计算机和互联网领域巨人们的例子来说，如果他们出生在1950年之前，那么在1975年时他们可能正为家庭和孩子奔波忙碌，要放弃现有的工作不是件容易的事，边工作边保持在新领域的大量学习更是不太能做到，也没多少人会尝试花高价去购买一台在当时并不知道有没有用的个人计算机。</p>
<p>而如果你出生在1960年后，同样会因为年龄太小而错失很多实习和创业的机会，当你终于等到的时候，大佬们早已分完山头。</p>
<p>所以，时势也有讲究，尤其是当某些能够改变世界大局的新事物出现的时候，你正处于什么年龄和状态对成功来说至关重要。</p>
]]></content>
      
        <categories>
            
            <category> 读书 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 成功 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[异类——不一样的成功启示录（一）]]></title>
      <url>/2017/08/14/%E5%BC%82%E7%B1%BB%E2%80%94%E2%80%94%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E6%88%90%E5%8A%9F%E5%90%AF%E7%A4%BA%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="原书信息"><a href="#原书信息" class="headerlink" title="原书信息"></a>原书信息</h3><p><strong><em>异类——不一样的成功启示录</em></strong></p>
<p><strong>原名</strong>：Outliers:The Story of Success</p>
<p>  作者：【加】马尔柯姆•格拉德威尔</p>
<p>译者：苗飞</p>
<p>出版社：中信出版社</p>
<p>出版时间：2014.3</p>
<p>ISBN：978-7-5086-4394-6</p>
<h3 id="开篇介绍"><a href="#开篇介绍" class="headerlink" title="开篇介绍"></a>开篇介绍</h3><p>《异类》是一本浅显易懂的成功学书籍。市面上的成功学书籍非常多，但大都没什么营养，类似多数保健品，吃不死，可也没啥用。然而保健品可能只花费了一点点钱，一本基本无用的书籍却是让你白花了大把时间，所以如果你不会挑书的话，看一本无用书的时间成本等于在该时间内你能产出的最大效益，如果你能看得见这个“最大效益”，其实是很惊人的。</p>
<p>本书作为成功学畅销书的代表之一，却不是一剂单纯的补药，里面的很多经典见解都并非情绪煽动，而是有一定逻辑的，包括大家熟知并引用最多的马太效应的优势积累、10000小时理论等。</p>
<p>在这里不仅仅是为了分享这些概念，学习概念固然有用，但最重要的是学习作者分析事物、看待事物的角度和方法，很多时候，我们不能从单一视角去判断一个人、一件事，不能从某个显而易见的原因去推出某个特定性的结果。</p>
<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>19世纪末，意大利的罗塞托人大量迁居美国的宾夕法尼亚。当地医生发现，迁居至此的罗塞托人既没有特别健康的饮食也没有独特的基因，但55岁以下的罗塞托人中竟然没有一人死于心脏病，这事对当年心脏病流行的美国来说简直是匪夷所思，医生将他们称为“异类”。</p>
<p>最终，一位内科医生通过长时间的研究调查，排除了多种可能影响健康的因素后，发现远离现代社会压力、自给自足的社会结构，竟然是导致罗赛托人健康的最主要因素。</p>
<p>所以，我们通常认为的那些“最”影响健康的那些因素，其实可能只是影响因素里最普通的“之一、之二、之三……”，影响人的健康及发展的不仅仅是饮食、地理位置和遗传基因，还有生活的环境、社会的压力等被我们严重忽略的因素。</p>
<p>身边更多的例子告诉我们，<strong>孤立地考虑某几个大家都认为的显而易见的因素，不一定能够解释导致某件事的结果的具体原因，</strong>如果说上面例子中，医生的工作是努力揭开健康的奥秘的话，那么本书的作者就是那个试图用多角度去揭开成功秘密的人。</p>
<h3 id="今日导言"><a href="#今日导言" class="headerlink" title="今日导言"></a>今日导言</h3><p>导致成功的因素比我们想象中多得多，也复杂得多，某些陈词滥调的因素可能未必是很多人成功的最主要原因，但人们为了简化，通常会只强调几个最容易看到的。</p>
<p>作者在开篇就列举了一个人们根本不会想到的方面。</p>
<h3 id="马太效应"><a href="#马太效应" class="headerlink" title="马太效应"></a>马太效应</h3><p>《新约•马太福音》中写道：“凡是有的，还要加给他，叫他有余；没有的，连他所有的，也要夺过来。”这就是著名的“马太效应”，相信大家都已经耳朵听出茧了。</p>
<p>当今社会，各个领域都有许多顶尖人才，他们在一个甚至多个的领域内出类拔萃，拥有普通人所没有的才华和资源。从世俗的角度，我们称这群人为“成功人士”。<br>在普通人眼中，成功人士要么智商卓越，要么勤奋刻苦，要么两者兼而有之，总之天才不管是多少汗水和多少天分组成的，都只是个比例问题。他们在我们的心目中基本都有着相似的成长经历，生于普通家庭，有一些努力奋斗的悲惨故事，凭借自身的天赋和努力，最终获得成功。一直以来，我们都将成功人士的成功经历描述成这样。<br>不过作者却旗帜鲜明地反对上述观点，认为这种传统的对于成功因素的认定方式完全不符合实际。<br>拿森林和树木做比喻，一棵参天大树之所以成为参天大树，并不一定是自身比其他树都要强，或者比其他任何树付出的努力更多，它跟旁边的树相比，可能仅仅是旁边的树在幼苗期被动物啃了或是在成长阶段由于长势太好被人砍伐了而它没有而已。树如此，人也如此，成功者并不意味着是同类里天赋最好或是能力最强的。</p>
<p>要说成功人士都是两手空空，纯粹靠拼死拼活从千军万马里挤出来的，有点牵强。他们可能得益于家庭，也有可能得益于某些特殊机遇等等，总之获得成功的原因是多个因素共同作用下的结果，而非主观努力就可以解释的，主观努力的人千千万，甚至有更努力或者更聪明的，没成功的却也比比皆是。</p>
<h3 id="年龄分组"><a href="#年龄分组" class="headerlink" title="年龄分组"></a>年龄分组</h3><p>加拿大一位研究人员对加拿大青年职业冰球队的队员做了一项调查，发现这些职业队员的出生月份大多都集中在1至3月。这很奇怪，难道出生月份和球员的能力有关系？还是说星座之类的其实确有其事？</p>
<p>都不是。经研究，加拿大冰球队的分组是按球员出生月份划分的，界线是1月1日。也就是1月至同年12月出生的孩子会被分到同一个训练组别。</p>
<p>罗永浩在谈及小孩打架时说，小孩子打架就是比发育。</p>
<p>是啊，在冰球队的同一个少年组里，1月出生的孩子比12月出生的孩子将近大了一年，不管是身体上还是心智上，这在孩子中间的差距是巨大的。接着就是一连串的连锁反应，你看上去比其他人优秀那么一点点，那么就意味着被球队和教练看中的可能性更大，就容易得到更好的技术辅导和更多的上场机会。几年以后，这些球员之间的差距就不是一开始的一点点了，而是真的有了很大的差别。</p>
<p>这有点像小时候，成绩稍微好那么一点点的学生更容易受到老师的亲睐，老师为了追求教学质量和自己的名声，会让他们参加竞赛，之后，老师可能会特别偏爱这些孩子，给他们开小灶，结果，这些孩子相比其他孩子优秀的幅度就越来越大。老师觉得自己眼光好，其实真的只是眼光好吗？很明显不是。</p>
<p>很多人觉得，这种孩童中间的小差距很快会随着成长而消失，但他们忽略了马太效应是有积累效应的，<strong>很多时候优秀的人会因为不断累积的先发优势而一直优秀下去。</strong></p>
<h3 id="优势积累"><a href="#优势积累" class="headerlink" title="优势积累"></a>优势积累</h3><p>在上面两个例子中我们看到，这种在旁人看来或许对于个人今后成长发展不太重要的微弱优势，将伴随孩子的成长，日积月累，一直延续影响孩子未来的发展。</p>
<p>究其原因，是我们忽视了社会制度对个人成才的巨大影响。<strong>不公平的分组制度过早地将一部分本可以同样甚至更为成功的人淘汰出局，人为地给他们塑造了不公平竞争的环境。</strong></p>
<p>不过分组制度固然存在不公平，却也并非该全盘否定，不分组怎么办呢？那就更乱了。分组制度只要更加细化、完善，就依然是不错的选择。</p>
<p>比如我们可以把同一年的孩子按三个月一组等分成4组： 1 -3月，4 -6月，7 -9月，10-12月，按年龄分为四个班级来管理和竞争，缩小同班同学之间的生理发育导致的差距，这样就能尽量给所有人提供更公平的机会，更不容易埋没真正的人才。</p>
]]></content>
      
        <categories>
            
            <category> 读书 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 成功 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初探机器学习]]></title>
      <url>/2017/08/08/%E5%88%9D%E6%8E%A2%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="什么是机器学习？"><a href="#什么是机器学习？" class="headerlink" title="什么是机器学习？"></a>什么是机器学习？</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>简而言之，机器学习是<strong>人工智能</strong>的一种,为电脑提供了<strong>学习能力</strong>而不显式地编程。</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>监督学习，训练样本包含对应的“标签”，如识别问题<ul>
<li>分类问题，样本标签属于两类或多类（离散）</li>
<li>回归问题，样本标签包括一个或多个连续变量（连续）</li>
</ul>
</li>
<li>无监督学习，训练样本的属性不包含对应的“标签”，如聚类问题</li>
</ul>
<h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fici1j02nnj30lb07i3yn.jpg" alt=""></p>
<h4 id="如何得到Learned-Model"><a href="#如何得到Learned-Model" class="headerlink" title="如何得到Learned Model"></a>如何得到Learned Model</h4><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fici1af9w6j30f10a5tai.jpg" alt=""></p>
<h5 id="概念描述"><a href="#概念描述" class="headerlink" title="概念描述"></a>概念描述</h5><ul>
<li><p>“学习” 问题通常包括n个样本数据（训练样本），然后预测未知数据（测试样本）的属性</p>
</li>
<li><p>每个样本包含的多个属性（多维数据）被称作“特征”</p>
</li>
<li><p>训练样本、验证样本、测试样本</p>
<p>​</p>
</li>
</ul>
<h2 id="通过scikit-learn认识机器学习"><a href="#通过scikit-learn认识机器学习" class="headerlink" title="通过scikit-learn认识机器学习"></a>通过<a href="http://scikit-learn.org/stable/index.html" target="_blank" rel="external">scikit-learn</a>认识机器学习</h2><h3 id="什么是scikit-learn"><a href="#什么是scikit-learn" class="headerlink" title="什么是scikit-learn"></a>什么是scikit-learn</h3><ul>
<li><p>面向Python的免费机器学习库</p>
</li>
<li><p>包含分类、回归、聚类算法，比如：SVM、随机森林、k-means等</p>
</li>
<li><p>包含降维、模型筛选、预处理等算法</p>
</li>
<li><p>支持NumPy和SciPy数据结构</p>
</li>
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">必要条件：</div><div class="line">  Python（&gt; = 2.6或&gt; = 3.3），</div><div class="line">  NumPy（&gt; = 1.6.1），</div><div class="line">  SciPy（&gt; = 0.9）。</div><div class="line">  </div><div class="line">  pip install scikit-learn</div><div class="line">  conda install scikit-learn</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="怎么用scikit-learn"><a href="#怎么用scikit-learn" class="headerlink" title="怎么用scikit-learn"></a>怎么用scikit-learn</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fici1i7f9vj31780k2ab9.jpg" alt=""></p>
<h4 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h4><ul>
<li><p>digits-数字识别</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"></div><div class="line"><span class="comment"># # 通过scikit-learn认识机器学习</span></div><div class="line"></div><div class="line"><span class="comment"># * 加载示例数据集</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</div><div class="line">digits = datasets.load_digits()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># digits</span></div><div class="line"><span class="keyword">print</span> (digits.data)</div><div class="line"><span class="keyword">print</span> (digits.data.shape)</div><div class="line"><span class="keyword">print</span> (digits.target_names)</div><div class="line"><span class="keyword">print</span> (digits.target)</div><div class="line"></div><div class="line"><span class="keyword">print</span> (digits.images[<span class="number">-2</span>])</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">plt.figure(figsize=(<span class="number">3</span>, <span class="number">3</span>))</div><div class="line">plt.imshow(digits.images[<span class="number">0</span>], cmap=plt.cm.gray_r, interpolation=<span class="string">'nearest'</span>)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># * 在训练集上训练模型</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 手动划分训练集、测试集 </span></div><div class="line">n_test = <span class="number">1400</span> <span class="comment"># 测试样本个数</span></div><div class="line">train_digits_X = digits.data[:-n_test, :]</div><div class="line">train_digits_Y = digits.target[:-n_test]</div><div class="line"></div><div class="line">test_digits_X = digits.data[-n_test:, :]</div><div class="line">test_digits_Y = digits.target[-n_test:]</div><div class="line"></div><div class="line"><span class="comment"># digits 选择SVM模型</span></div><div class="line">svm_digits = svm.SVC(gamma=<span class="number">0.001</span>, C=<span class="number">100.</span>)</div><div class="line"></div><div class="line"><span class="comment"># 训练模型</span></div><div class="line">svm_digits.fit(train_digits_X, train_digits_Y)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># * 在测试集上测试模型</span></div><div class="line"></div><div class="line"></div><div class="line">digits_pred_Y = svm_digits.predict(test_digits_X)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 查看结果</span></div><div class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</div><div class="line"></div><div class="line"><span class="keyword">print</span> (<span class="string">'预测标签：'</span>, digits_pred_Y)</div><div class="line"><span class="keyword">print</span> (<span class="string">'真实标签：'</span>, test_digits_Y)</div><div class="line"></div><div class="line"><span class="keyword">print</span> (<span class="string">'svm_digits精确度：'</span>,accuracy_score(test_digits_Y, digits_pred_Y))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># * 保存模型</span></div><div class="line"></div><div class="line"><span class="comment"># python 2 import cPickle as pickle</span></div><div class="line"><span class="keyword">import</span> _pickle <span class="keyword">as</span> pickle</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'svm_model.pkl'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">    pickle.dump(svm_digits, f)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment"># 重新加载模型进行预测</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'svm_model.pkl'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line">    model = pickle.load(f)</div><div class="line"></div><div class="line">random_samples_index = np.random.randint(<span class="number">0</span>, <span class="number">1797</span>, <span class="number">100</span>)</div><div class="line">random_samples = digits.data[random_samples_index, :]</div><div class="line">random_targets = digits.target[random_samples_index]</div><div class="line"></div><div class="line"><span class="keyword">print</span> (random_samples)</div><div class="line"></div><div class="line">random_predict = model.predict(random_samples)</div><div class="line"></div><div class="line"><span class="keyword">print</span> (random_predict)</div><div class="line"><span class="keyword">print</span> (random_targets)</div><div class="line"></div><div class="line"><span class="keyword">print</span> (<span class="string">'svm_digits精确度：'</span>,accuracy_score(random_targets, random_predict))</div></pre></td></tr></table></figure>
</li>
<li><p>iris-<a href="https://zh.wikipedia.org/wiki/%E5%AE%89%E5%BE%B7%E6%A3%AE%E9%B8%A2%E5%B0%BE%E8%8A%B1%E5%8D%89%E6%95%B0%E6%8D%AE%E9%9B%86" target="_blank" rel="external">鸢尾花</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"></div><div class="line"><span class="comment"># # scikit-learn入门</span></div><div class="line"></div><div class="line"><span class="comment"># * 交叉验证</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, cross_val_score</div><div class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">get_ipython().magic(<span class="string">'matplotlib inline'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 查看数据集</span></div><div class="line"><span class="comment"># iris</span></div><div class="line">iris = datasets.load_iris()</div><div class="line"><span class="keyword">print</span> (iris.data)</div><div class="line"><span class="keyword">print</span> (iris.data.shape)</div><div class="line"><span class="keyword">print</span> (iris.target_names)</div><div class="line"><span class="keyword">print</span> (iris.target)</div><div class="line"></div><div class="line"></div><div class="line">X = iris.data</div><div class="line">y = iris.target</div><div class="line"></div><div class="line"><span class="comment"># 分割训练集、测试集</span></div><div class="line"><span class="comment"># random_state确保每次随机分割得到相同的结果</span></div><div class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">1</span>/<span class="number">3.</span>, random_state=<span class="number">5</span>) </div><div class="line"></div><div class="line"></div><div class="line">k_range = range(<span class="number">1</span>, <span class="number">30</span>)</div><div class="line">cv_scores = []</div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> k_range:</div><div class="line">    knn = KNeighborsClassifier(n)</div><div class="line">    scores = cross_val_score(knn, X_train, y_train, cv=<span class="number">10</span>, scoring=<span class="string">'accuracy'</span>) <span class="comment"># 分类问题使用</span></div><div class="line">    <span class="comment">#scores = cross_val_score(knn, X_train, y_train, cv=10, scoring='neg_mean_squared_error') # 回归问题使用</span></div><div class="line">    cv_scores.append(scores.mean())</div><div class="line"></div><div class="line">plt.plot(k_range, cv_scores)</div><div class="line">plt.xlabel(<span class="string">'K'</span>)</div><div class="line">plt.ylabel(<span class="string">'Accuracy'</span>)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 选择最优的K</span></div><div class="line">best_knn = KNeighborsClassifier(<span class="number">1</span>)</div><div class="line">best_knn.fit(X_train, y_train)</div><div class="line"></div><div class="line"><span class="keyword">print</span> (best_knn.score(X_test, y_test))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># * 特征归一化</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment"># 特征归一化</span></div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</div><div class="line"></div><div class="line">x1 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>).reshape(<span class="number">5</span>, <span class="number">1</span>)</div><div class="line">x2 = np.random.randint(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">5</span>).reshape(<span class="number">5</span>,<span class="number">1</span>)</div><div class="line">x3 = np.random.randint(<span class="number">0</span>, <span class="number">100000</span>, <span class="number">5</span>).reshape(<span class="number">5</span>, <span class="number">1</span>)</div><div class="line"></div><div class="line">X = np.concatenate([x1, x2, x3], axis=<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> (X)</div><div class="line"></div><div class="line"><span class="keyword">print</span> (preprocessing.scale(X))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 生成分类数据进行验证scale的必要性</span></div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_classification</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">get_ipython().magic(<span class="string">'matplotlib inline'</span>)</div><div class="line"></div><div class="line"><span class="comment">#n_samples:样品数量，</span></div><div class="line"><span class="comment">#n_features，特征总数，</span></div><div class="line"><span class="comment">#n_redundant，冗余特征总数</span></div><div class="line"><span class="comment">#X ,数据</span></div><div class="line"><span class="comment">#y ，标签</span></div><div class="line">X, y = make_classification(n_samples=<span class="number">1000</span>, n_features=<span class="number">30</span>, n_redundant=<span class="number">10</span>,</div><div class="line">                           random_state=<span class="number">25</span>, n_clusters_per_class=<span class="number">1</span>, scale=<span class="number">100</span>)</div><div class="line"></div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</div><div class="line"></div><div class="line"><span class="comment">#分割数据集</span></div><div class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">1</span>/<span class="number">3.</span>, random_state=<span class="number">7</span>) </div><div class="line"></div><div class="line">svm_classifier = svm.SVC()</div><div class="line"><span class="comment">#训练模型</span></div><div class="line">svm_classifier.fit(X_train, y_train)</div><div class="line"><span class="comment">#评分</span></div><div class="line"><span class="keyword">print</span> (svm_classifier.score(X_test, y_test))</div><div class="line"></div><div class="line">X = preprocessing.scale(X)</div><div class="line"></div><div class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">1</span>/<span class="number">3.</span>, random_state=<span class="number">7</span>) </div><div class="line">svm_classifier = svm.SVC()</div><div class="line">svm_classifier.fit(X_train, y_train)</div><div class="line"><span class="keyword">print</span> (svm_classifier.score(X_test, y_test))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># * 训练模型</span></div><div class="line"></div><div class="line"><span class="comment"># 回归模型</span></div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</div><div class="line"></div><div class="line">boston_data = datasets.load_boston()</div><div class="line">X = boston_data.data</div><div class="line">y = boston_data.target</div><div class="line"></div><div class="line"><span class="keyword">print</span> (<span class="string">'样本：'</span>)</div><div class="line"><span class="keyword">print</span> (X[:<span class="number">5</span>, :])</div><div class="line"><span class="keyword">print</span> (<span class="string">'标签：'</span>)</div><div class="line"><span class="keyword">print</span> (y[:<span class="number">5</span>])</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 选择线性回顾模型</span></div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</div><div class="line"></div><div class="line">lr_model = LinearRegression()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div><div class="line"></div><div class="line"><span class="comment"># 分割训练集、测试集</span></div><div class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">1</span>/<span class="number">3.</span>, random_state=<span class="number">7</span>) </div><div class="line"></div><div class="line"><span class="comment"># 训练模型</span></div><div class="line">lr_model.fit(X_train, y_train)</div><div class="line"></div><div class="line"><span class="comment"># 返回参数</span></div><div class="line">lr_model.get_params()</div><div class="line"></div><div class="line">lr_model.score(X_train, y_train)</div><div class="line"></div><div class="line">lr_model.score(X_test, y_test)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fici1irankj30iy0a5aa0.jpg" alt=""></p>
<h3 id="特征归一化"><a href="#特征归一化" class="headerlink" title="特征归一化"></a>特征归一化</h3><p>当一个模型在优化参数时就会使用梯度下降算法，那么下降速度则与整个数据跨度有关。因此当存在多个特征时，如果特征数据范围不一致，可能会导致梯度下降的路径摇摆不定，效率低下。</p>
<p>因此我们需要进行特征归一化，简而言之，就是让他们基本在同一个数据范围内。</p>
<ul>
<li><h4 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h4></li>
</ul>
<p>让所有的特征的数据范围保持一致。只需某一特征的所有值除以其数据范围（最大值减去最小值）即可。<br>$$<br>  xi=\frac{xi}{max\lbrace{xi}\rbrace-min\lbrace{xi}\rbrace}<br>$$</p>
<ul>
<li><h4 id="平均归一化"><a href="#平均归一化" class="headerlink" title="平均归一化"></a>平均归一化</h4></li>
</ul>
<p>让所有特征数据以0为中心。只需某一特征的所有值减去其平均值即可。<br>$$<br>xi=xi-avg(xi)<br>$$<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fici1ikxjsj31170h9drb.jpg" alt=""></p>
<h2 id="大案例：利用声音数据进行性别识别"><a href="#大案例：利用声音数据进行性别识别" class="headerlink" title="大案例：利用声音数据进行性别识别"></a>大案例：利用声音数据进行性别识别</h2><p><a href="https://www.kaggle.com/primaryobjects/voicegender" target="_blank" rel="external">数据来源</a></p>
<p><strong>main.py</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> pandas_tools <span class="keyword">import</span> inspect_dataset</div><div class="line"><span class="keyword">from</span> pandas_tools <span class="keyword">import</span> process_missing_data</div><div class="line"><span class="keyword">from</span> pandas_tools <span class="keyword">import</span> visualize_two_features, visualize_single_feature, \</div><div class="line">    visualize_multiple_features</div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, cross_val_score</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</div><div class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        主函数</div><div class="line">    """</div><div class="line">    <span class="comment"># Step.0 加载数据</span></div><div class="line">    filepath = <span class="string">'./dataset/voice.csv'</span></div><div class="line">    voice_data = pd.read_csv(filepath)</div><div class="line"></div><div class="line">    <span class="comment"># Step.1 查看数据</span></div><div class="line">    inspect_dataset(voice_data)</div><div class="line">    <span class="comment"># 查看各label的数据量</span></div><div class="line">    <span class="keyword">print</span> (voice_data[<span class="string">'label'</span>].value_counts())</div><div class="line"></div><div class="line">    <span class="comment"># Step.2 处理缺失数据</span></div><div class="line">    voice_data = process_missing_data(voice_data)</div><div class="line"></div><div class="line">    <span class="comment"># Step.3 特征分布可视化</span></div><div class="line">    fea_name1 = <span class="string">'meanfun'</span> <span class="comment">#基于声信号的基频平均值</span></div><div class="line">    fea_name2 = <span class="string">'centroid'</span><span class="comment">#频率中心</span></div><div class="line"></div><div class="line">    <span class="comment">#单个特征</span></div><div class="line">    visualize_single_feature(voice_data, fea_name1)</div><div class="line"></div><div class="line">    <span class="comment">#两个特征</span></div><div class="line">    visualize_two_features(voice_data, fea_name1, fea_name2)</div><div class="line"></div><div class="line">    <span class="comment">#多个特征</span></div><div class="line">    fea_names = [<span class="string">'meanfreq'</span>, <span class="string">'Q25'</span>, <span class="string">'Q75'</span>,fea_name1, fea_name2,<span class="string">'label'</span>]</div><div class="line">    visualize_multiple_features(voice_data, fea_names)</div><div class="line"></div><div class="line">    <span class="comment"># Step.4 准备数据</span></div><div class="line">    X = voice_data.iloc[:, :<span class="number">-1</span>].values</div><div class="line">    voice_data[<span class="string">'label'</span>].replace(<span class="string">'male'</span>, <span class="number">0</span>, inplace=<span class="keyword">True</span>)</div><div class="line">    voice_data[<span class="string">'label'</span>].replace(<span class="string">'female'</span>, <span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line">    y = voice_data[<span class="string">'label'</span>].values</div><div class="line"></div><div class="line">    <span class="comment"># 特征归一化</span></div><div class="line">    X = preprocessing.scale(X)</div><div class="line"></div><div class="line">    <span class="comment"># 分割训练集、测试集</span></div><div class="line">    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">1</span>/<span class="number">3.</span>, random_state=<span class="number">5</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 选择模型，交叉验证</span></div><div class="line">    k_range = range(<span class="number">1</span>, <span class="number">31</span>)</div><div class="line">    cv_scores = []</div><div class="line">    <span class="keyword">print</span> (<span class="string">'交叉验证：'</span>)</div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> k_range:</div><div class="line">        knn = KNeighborsClassifier(k)</div><div class="line">        scores = cross_val_score(knn, X_train, y_train, cv=<span class="number">10</span>, scoring=<span class="string">'accuracy'</span>)</div><div class="line">        score_mean = scores.mean()</div><div class="line">        cv_scores.append(score_mean)</div><div class="line">        <span class="keyword">print</span> (<span class="string">'%i: %.4f'</span> % (k, score_mean))</div><div class="line"></div><div class="line">    best_k = np.argmax(cv_scores) + <span class="number">1</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">'最优K:'</span>, best_k)</div><div class="line"></div><div class="line">    plt.plot(k_range, cv_scores)</div><div class="line">    plt.xlabel(<span class="string">'K'</span>)</div><div class="line">    plt.ylabel(<span class="string">'Accuracy'</span>)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line">    <span class="comment"># 训练模型</span></div><div class="line">    knn_model = KNeighborsClassifier(best_k)</div><div class="line">    knn_model.fit(X_train, y_train)</div><div class="line">    <span class="keyword">print</span> (<span class="string">'测试模型，准确率：'</span>, knn_model.score(X_test, y_test))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    run_main()</div></pre></td></tr></table></figure>
<p><strong>pandas_tools.py</strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inspect_dataset</span><span class="params">(df_data)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">            查看加载的数据基本信息</div><div class="line">    """</div><div class="line">    <span class="keyword">print</span> (<span class="string">'数据集基本信息：'</span>)</div><div class="line">    <span class="keyword">print</span> (df_data.info())</div><div class="line">    </div><div class="line">    <span class="keyword">print</span> (<span class="string">'数据集有%i行，%i列'</span> %(df_data.shape[<span class="number">0</span>], df_data.shape[<span class="number">1</span>]))</div><div class="line">    <span class="keyword">print</span> (<span class="string">'数据预览:'</span>)</div><div class="line">    <span class="keyword">print</span> (df_data.head())</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_missing_data</span><span class="params">(df_data)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">            处理缺失数据</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> df_data.isnull().values.any():</div><div class="line">        <span class="comment"># 存在缺失数据</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">'存在缺失数据！'</span>)</div><div class="line">        df_data = df_data.fillna(<span class="number">0.</span>)    <span class="comment"># 填充nan</span></div><div class="line">        <span class="comment"># df_data = df_data.dropna()    # 过滤nan</span></div><div class="line">    <span class="keyword">return</span> df_data.reset_index()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize_two_features</span><span class="params">(df_data, col_label1, col_label2)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        两个特征分布可视化</div><div class="line">    """</div><div class="line">    g = sns.FacetGrid(df_data, hue=<span class="string">"label"</span>, size=<span class="number">8</span>)</div><div class="line">    g = g.map(plt.scatter, col_label1, col_label2)</div><div class="line">    g.add_legend()</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize_single_feature</span><span class="params">(df_data, col_label)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        单个特征可视化</div><div class="line">    """</div><div class="line">    sns.boxplot(x=<span class="string">"label"</span>, y=col_label, data=df_data)</div><div class="line">    </div><div class="line">    g2 = sns.FacetGrid(df_data, hue=<span class="string">"label"</span>, size=<span class="number">6</span>)</div><div class="line">    g2.map(sns.kdeplot, col_label)</div><div class="line">    <span class="comment">#g2.add_legend()</span></div><div class="line">    </div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize_multiple_features</span><span class="params">(voice_data, fea_names)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        多个特征可视化</div><div class="line">    """</div><div class="line">    sns.pairplot(voice_data[fea_names], hue=<span class="string">'label'</span>, size=<span class="number">2</span>)</div><div class="line">    plt.show()</div></pre></td></tr></table></figure>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://scikit-learn.org/stable/tutorial/machine_learning_map/index.html" target="_blank" rel="external">选择模型</a></p>
<p><a href="https://www.slideshare.net/tw_dsconf/ss-62245351" target="_blank" rel="external">一天搞懂深度学习</a></p>
<p><a href="http://scikit-learn.org/stable/tutorial/" target="_blank" rel="external">scikit-learning教程</a></p>
<p><a href="http://www.cnblogs.com/jasonfreak/p/5448385.html" target="_blank" rel="external">使用sklearn做单机特征工程</a></p>
]]></content>
      
        <categories>
            
            <category> Machine learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> scikit-learn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jupyter启动问题]]></title>
      <url>/2017/08/03/jupyter%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">jupyter notebook</span></div></pre></td></tr></table></figure>
<p>运行之后显示<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[<span class="meta">W 21:11:31.141 NotebookApp</span>] Cannot bind to localhost, <span class="keyword">using</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">as</span> <span class="keyword">default</span> ip</div><div class="line">    [<span class="meta">Errno 8</span>] nodename nor servname provided, or not known</div><div class="line">[<span class="meta">I 21:11:31.150 NotebookApp</span>] Serving notebooks <span class="keyword">from</span> local directory: /Users/hesj/Downloads/lecture08_codes</div><div class="line">[<span class="meta">I 21:11:31.150 NotebookApp</span>] <span class="number">0</span> active kernels</div><div class="line">[<span class="meta">I 21:11:31.150 NotebookApp</span>] The Jupyter Notebook <span class="keyword">is</span> running at: http:<span class="comment">//127.0.0.1:8888/</span></div><div class="line">[<span class="meta">I 21:11:31.150 NotebookApp</span>] Use Control-<span class="function">C to stop <span class="keyword">this</span> server and shut down all <span class="title">kernels</span> (<span class="params">twice to skip confirmation</span>).</span></div><div class="line">0:42: execution error: “"http:<span class="comment">//127.0.0.1:8888/tree"”不理解“open location”信息。 (-1708)</span></div></pre></td></tr></table></figure></p>
<p>浏览器没有自动打开</p>
<a id="more"></a>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>macOS 10.12.5</li>
<li>python 3.4</li>
</ul>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>​    这个问题由于最新的Mac OSX 10.12.5升级。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li><p>生成配置文件</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jupyter notebook --<span class="keyword">generate</span>-<span class="keyword">config</span></div><div class="line">#记录配置文件地址</div></pre></td></tr></table></figure>
</li>
<li><p>在终端中输入ipython3打开Python，生成密码的sha1密钥</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from notebook<span class="selector-class">.auth</span> import passwd</div><div class="line"><span class="function"><span class="title">passwd</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<p>在文本框中输入并确认一次密码后记录sha1秘钥值，如’sha1：XXXXXXX’</p>
<p>退出python</p>
</li>
<li><p>vim打开配置文件jupyter_notebook_config.py，在最后加入</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 制定浏览器</span></div><div class="line">c.NotebookApp.browser = <span class="string">u'chrome'</span></div><div class="line">c.NotebookApp.password = <span class="string">u'sha1:XXXXXXX'</span></div></pre></td></tr></table></figure>
</li>
<li><p>重启jupyter，重新打开网页即可</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jupyter </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
